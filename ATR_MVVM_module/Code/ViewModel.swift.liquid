{% include 'header' %}
import Foundation
import RxSwift

protocol {{ module_info.name }}ViewModelProtocol: ViewModel {
    var state: Variable<{{ module_info.name }}State> { get }
}

enum {{ module_info.name }}Error: Error {
}

typealias {{ module_info.name }}State = State< , {{ module_info.name }}Error>

final class {{ module_info.name }}ViewModel {
    fileprivate let disposeBag = DisposeBag()
    let state: Variable<{{ module_info.name }}State> = Variable(.initial)

    let router: AppRouterProtocol
    init(router: AppRouterProtocol) {
        self.router = router
    }
}

extension {{ module_info.name }}ViewModel: {{ module_info.name }}ViewModelProtocol {
    func viewIsReady() {
    }
}
